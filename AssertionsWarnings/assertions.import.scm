;;;; assertions.import.scm - GENERATED BY CHICKEN 5.2.0 -*- Scheme -*-

(##sys#with-environment
  (lambda ()
    (scheme#eval
      '(import-syntax
         (only r7rs
               begin
               cond-expand
               export
               import
               import-for-syntax
               include
               include-ci
               syntax-rules)
         scheme.base
         scheme.write))
    (import
      (only r7rs
            begin
            cond-expand
            export
            import
            import-for-syntax
            include
            include-ci
            syntax-rules))
    (##sys#register-compiled-module
      'assertions
      'assertions
      (scheme#list
        '(warning . assertions#warning)
        '(<warning> . assertions#<warning>)
        '(assertion . assertions#assertion)
        '(<assertion> . assertions#<assertion>))
      '((assertion-object? . assertions#assertion-object?)
        (assertion-object-message . assertions#assertion-object-message)
        (assertion-object-irritants . assertions#assertion-object-irritants)
        (warning-object? . assertions#warning-object?)
        (warning-object-message . assertions#warning-object-message)
        (warning-object-irritants . assertions#warning-object-irritants))
      (scheme#list
        (scheme#cons
          'warn
          (syntax-rules
            ()
            ((_ obj message irritant ...)
             (begin
               (unless
                 (string? message)
                 (error "warn message must be a string"))
               (unless
                 obj
                 (let ((returned
                         (raise-continuable
                           (warning message (list irritant ...)))))
                   (display returned (current-error-port))))))))
        (scheme#cons
          'assert
          (syntax-rules
            ()
            ((_ obj message irritant ...)
             (begin
               (unless
                 (string? message)
                 (error "assert message must be a string"))
               (unless obj (raise (assertion message (list irritant ...))))))))
        (scheme#cons
          '|\x04r7rsassertions|
          (##sys#er-transformer (##core#lambda (x r c) (##core#undefined)))))
      (scheme#list))))

;; END OF FILE
